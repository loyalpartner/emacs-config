#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (setq indo-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1)

  ;;(blank-cursor-mode -1)
  (setq ring-bell-function 'ignore)
  (setq mouse-yank-at-point t)
  (setq split-width-threshold nil)

  (defalias 'list-buffers 'ibuffer)

  (prefer-coding-system 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)

  ;; 终端中文乱码
  (set-terminal-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

  (defun change-shell-mode-coding ()
    (progn
      (set-terminal-coding-system 'gbk)
      (set-keyboard-coding-system 'gbk)
      (set-selection-coding-system 'gbk)
      (set-buffer-file-coding-system 'gbk)
      (set-file-name-coding-system 'gbk)
      (modify-coding-system-alist 'process "*" 'gbk)
      (set-buffer-process-coding-system 'gbk 'gbk)
      (set-file-name-coding-system 'gbk)))
  (add-hook 'shell-mode-hook 'change-shell-mode-coding)

  (use-package exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))

  (global-unset-key (kbd "C-z"))

  (defun last-buffer1 ()
    (interactive)
    (switch-to-buffer (other-buffer)))

  (define-key global-map (kbd "C-z l") 'last-buffer1)
#+END_SRC
* theme
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :hook
    ((prog-mode . rainbow-delimiters-mode)
     (org-mode . rainbow-delimiters-mode))
    :config
    (show-paren-mode 1)
    :custom
    (show-paren-style 'paren-blinking))


  (use-package doom-modeline
    :ensure t
    :config
    (doom-modeline-mode 1))

  ;; (use-package molokai-theme :ensure t)

  (use-package doom-themes :ensure t
    :config
    (load-theme 'doom-one t))
#+END_SRC
* posframe
#+BEGIN_SRC emacs-lisp
  (use-package posframe
    :ensure t)
#+END_SRC
* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t
  :commands try)
#+END_SRC
* which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    :custom
    (which-key-side-window-location 'right)
    (which-key-side-window-max-width 0.33)
    (which-key-side-window-max-height 0.25)
    (which-key-popup-type 'side-window))
#+END_SRC

* window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :defer t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
	 ((t (:inherit ace-jump-face-foreground :height 3.0)))))))

  (use-package window-numbering
    :ensure t
    :config
    (window-numbering-mode))
#+END_SRC
* ivy/counsel/swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)
	   ("C-r" . swiper)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("M-y" . counsel-yank-pop))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

* avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* COMMENT auto-completion
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (progn
      (ac-config-default)
      (add-to-list 'ac-modes 'org-mode)))
#+END_SRC
* snippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t
    :requires yasnippet)
#+END_SRC
* company-mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish ""
    :commands global-company-mode
    :bind
    (:map company-active-map
	  ("C-n" . company-select-next)
	  ("C-p" . company-select-previous))
    :custom
    (company-idle-delay 0.2)
    (company-selection-wrap-around t)
    (company-minimum-prefix-length 0)
    (company-candidates-length 30)
    (company-require-match nil)
    (company-dabbrev-ignore-case nil)
    (company-dabbrev-downcase nil)
    (company-show-numbers t)
    :config
    (global-company-mode)
    (use-package company-statistics
      :ensure t
      :config
      (company-statistics-mode))
    (bind-keys :map company-active-map
	       ("TAB" . company-complete)))

  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode))

  (use-package company-posframe
    :ensure t
    :config
    (company-posframe-mode 1))
#+END_SRC
* lsp settings
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode :ensure t
    :commands lsp
    :hook ((js2-mode . lsp)))


  (use-package company-lsp
    :ensure t
    :commands company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC
* Reveal.js
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
  :ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
  :ensure t)
#+END_SRC

* chinese
#+BEGIN_SRC emacs-lisp

     ;;(set-default-font "Sarasa Term TC")
	;; (use-package cnfonts
	;;   :ensure t
	;;   :config
	;;   (cnfonts-

    (use-package pangu-spacing
      :ensure t
      :config (global-pangu-spacing-mode 1))

    (use-package ace-pinyin
      :ensure t
      :config
      (ace-pinyin-global-mode 1))

    (use-package youdao-dictionary
      :ensure t
      :bind (("C-z y" . youdao-dictionary-search-at-point+)))

    ;; rime
    (use-package liberime
					  ;:load-path "~/tmp/.emacs.d/liberime.so"
      :load-path "liberime.so"
      :if (eq system-type 'darwin)
      :config
      ;; 注意事项:
      ;; 1. 文件路径需要用 `expand-file-name' 函数处理。
      ;; 2. `librime-start' 的第一个参数说明 "rime 共享数据文件夹"
      ;;     的位置，不同的平台其位置也各不相同，可以参考：
      ;;     https://github.com/rime/home/wiki/RimeWithSchemata
      (liberime-start
       "/Library/Input Methods/Squirrel.app/Contents/SharedSupport"
       (file-truename (concat emacs-root-dir "/pyim/rime/")))
      (liberime-select-schema "double_pinyin_flypy")
      (setq pyim-default-scheme 'rime))

    ;;; https://github.com/tumashu/pyim#org37155c7
    (use-package pyim :ensure t
  ;;    :bind ("C-\\" . toggle-input-method)
      :config
      (setq default-input-method "pyim")
      (setq pyim-page-tooltip 'posframe))
#+END_SRC
* lispy
#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook 'lispy-mode 1)
    )
#+END_SRC
* flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+END_SRC
* python
#+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-python-ms :ensure t
  ;;   :hook (python-mode . lsp)
  ;;   :demand
  ;;   :init
  ;;   (setq lsp-python-ms-executable "~/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer.exe"))

  (use-package company-anaconda
    :ensure t
    :hook (python-mode . anaconda-mode)
    :config
    )

  (eval-after-load "company"
   '(add-to-list 'company-backends '(company-anaconda :with company-capf company-yasnippet)))
#+END_SRC

* javascript
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'")

  ;; (use-package company-tern
  ;;   :ensure t
  ;;   :hook (js2-mode . tern-mode))

  (eval-after-load "lsp"
    (add-hook 'js2-mode-hook 'lsp))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp

  (with-eval-after-load 'org
    (use-package org-protocol )


    (use-package org-bullets
      :ensure t
      :init
      (dolist (mode (list 'org-mode-hook 'org-journal-mode-hook))
	(add-hook mode (lambda () (org-bullets-mode 1)))))


    (use-package org-pomodoro :ensure t)

    (use-package org-journal :ensure t
      :custom
      (org-journal-dir "~/org/journal/")
      (org-journal-date-format "%A, %d %B %Y"))

    (use-package org-agenda
      :defer 10
      :config
      (setq
       org-default-notes-file "~/org/inbox.org"
       org-agenda-files (list
			 "~/org/inbox.org"
			 "~/org/word.org"
			 "~/org/email.org"
			 "~/org/tasks.org"
			 "~/org/wtasks.org"
			 "~/org/wkb.org")))

    ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    (setq
     org-id-link-to-org-use-id 'create-if-interactive
     org-log-done 'time
     org-bullets-bullet-list '("■" "◆" "▲" "▶")
     org-agenda-start-on-weekday 0
     org-todo-keywords '((sequence
			  "TODO(t!)"
			  "NEXT(n!)"
			  "STARTED(a!)"
			  "WAIT(w@/!)"
			  "OTHERS(o!)"
			  "|"
			  "DONE(d)"
			  "CANCELLED(c)")))
    ;; http://www.zmonster.me/2018/02/28/org-mode-capture.html
    (setq org-capture-templates '())
    (add-to-list 'org-capture-templates '("t" "Task"))
    (add-to-list 'org-capture-templates
		 '("N" "Note/Data"
		   entry (file+headline "~/org/inbox.org" "Note")
		   "* %:annotation \n\n  Source: %u \n\n %i\n\n "))
    (add-to-list 'org-capture-templates
		 '("n" "Note/Data"
		   entry (file+headline "~/org/inbox.org" "Note")
		   "* %? \n\n  Source: %u \n\n %i\n\n ")))
#+END_SRC
* lazy cat' toolset
#+BEGIN_SRC emacs-lisp
  (use-package auto-save
    :config
    (auto-save-enable)
    (setq auto-save-silent t)		; quietly save
    (setq auto-save-delete-trailing-whitespace t))

  (use-package snails
    :bind (("C-z C-z" . snails)))

  (use-package google-translate
    :bind (("C-z t" . google-translate-at-point))
    :custom
    (google-translate-default-target-language "zh-CN")
    (google-translate-default-source-language "en"))

  (use-package insert-translated-name
    :bind (("C-z C-c" . insert-translated-name-insert)))

  ;; (use-package awesome-tray)
#+END_SRC
* os settings
#+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)

  (setq w32-pass-alt-to-system nil)
  (setq w32-pass-lwindow-to-system t)
  (setq w32-lwindow-modifier 'nil) ; Left Windows key

  (setq w32-pass-rwindow-to-system t)
  (setq w32-rwindow-modifier 'nil); Right Windows key

  ;; (setq w32-pass-apps-to-system nil)
  ;; (setq w32-apps-modifier 'hyper) ;
#+END_SRC
* anki
#+BEGIN_SRC emacs-lisp
  (use-package anki-editor
    :ensure t
    :defer 5)

  (defun create-word-card (word result)
    (let ((fields `(("正面" . ,word)
		    ("背面" . ,result))))
      (anki-editor--push-note
       `((deck . "word")
	 (note-id . -1)
	 (note-type . "basic")
	 (fields . ,fields)))))

  ;; TODO 不处理中文
  (defun create-card-with-point-word ()
    (interactive)
    (require 'youdao-dictionary)
    (require 'anki-editor)
    (let* ((string (thing-at-point 'word))
	  (result (youdao-dictionary--format-result string)))
      (create-word-card string (replace-regexp-in-string "\n" "<br>" result))))

  (defalias 'cc 'create-card-with-point-word)
#+END_SRC
* atomic-chrome
#+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome
    :ensure t

    :config
    (atomic-chrome-start-server))
#+END_SRC
* keyfreq
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :ensure t
    :hook (prog-mode . keyfreq-mode))
#+END_SRC
* git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands magit
    :ensure t)


  (use-package gh
    :ensure t)

  (use-package git-gutter
    :ensure t
    :hook (prog-mode . git-gutter-mode))

  (use-package gist :ensure t
    :commands gist-list)
#+END_SRC
* projectile
#+BEGIN_SRC emacs-lisp
  ;; https://docs.projectile.mx/en/latest/
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-file-exists-remote-cache-expire (* 10 60)))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
#+END_SRC
* server
#+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (unless (and (fboundp 'server-running-p)
		 (server-running-p))
      (server-start)))
#+END_SRC
* edit config
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
* tools
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    :custom
    (undo-tree-auto-save-history t))
#+END_SRC
