#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent
* interface tweaks
  #+BEGIN_SRC emacs-lisp
  ;;; https://www.emacswiki.org/emacs/GrepMode#MSYS
    (when IS-WINDOWS (setenv "PATH"
                             (concat
                              ;; Change this with your path to MSYS bin d
                              (file-name-directory
                               (executable-find "grep"))
                              (getenv "PATH"))))
      ;;;  init
    (setq inhibit-startup-message t)

    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)

    (setq frame-title-format "%b [%I] %f GNU/Emacs")
    (setq indo-enable-flex-matching t)

    ;; (setq ido-everywhere t)
    ;; (ido-mode 1)

    (setq column-number-mode 1)
    (global-display-line-numbers-mode +1)

    (blink-cursor-mode -1)
    (global-hl-line-mode)

    (setq kill-ring-max 200)
    (setq kill-do-not-save-duplicates t)

    (setq-default indent-tabs-mode nil)

    (setq ring-bell-function 'ignore)

    (setq mouse-yank-at-point t)
                                            ;(setq split-width-threshold nil)

        ;;; make make ring easy to use.
    (setq set-mark-command-repeat-pop t)
    (defalias 'list-buffers 'ibuffer)

    (setq recentf-max-saved-items 500)

    (setq-default fill-column 80)

    ;; local variable safe
    (setq enable-local-variables t)

    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :ensure t
      :config
      (exec-path-from-shell-initialize))

    (global-unset-key (kbd "C-z"))

    (winner-mode)
    (windmove-default-keybindings)

    (add-hook 'prog-mode-hook 'electric-pair-local-mode)
    (add-hook 'prog-mode-hook 'electric-indent-local-mode)
  #+END_SRC
* theme
  #+BEGIN_SRC emacs-lisp

    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (size-indication-mode t)

    (use-package
      rainbow-delimiters
      :ensure t
      :config (show-paren-mode 1)
      (rainbow-delimiters-mode 1)
      :custom (show-paren-style
	       'paren-blinking))

    ;;; https://www.emacswiki.org/emacs/UnicodeFonts
    (use-package unicode-fonts
      :ensure t
      :config
      (unicode-fonts-setup))

    (use-package
      doom-modeline
      :ensure t
      :config (doom-modeline-mode 1)
      (use-package
	doom-themes
	:if (not IS-WINDOWS)
	:ensure t
	:config (load-theme 'doom-one t)))

    ;; (use-package molokai-theme :ensure t)
    (use-package beacon :ensure t
      :config (beacon-mode 1))
  #+END_SRC
** emojify
   emoji 显示
   #+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t
    :hook (after-init . global-emojify-mode))

   #+END_SRC

* enhance
** try
   #+BEGIN_SRC emacs-lisp
 (use-package try
   :ensure t
   :commands try)
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil :ensure t)
     ;; (use-package evil
     ;;   :ensure t
     ;;   :hook (after-init . evil-mode)
     ;;   :config
     ;;   (use-package evil-nerd-commenter :ensure t)
     ;;   (use-package evil-surround :ensure t)
     ;;   (use-package evil-matchit :ensure t)
     ;;   (use-package evil-visualstar :ensure t)
     ;;   (use-package evil-leader :ensure t
     ;;     :config (global-evil-leader-mode) (evil-leader/set-leader "<SPC>"))
     ;;   (use-package evil-escape :ensure t
     ;;     :config (evil-escape-mode 1) (setq evil-escape-key-sequence "hh" evil-escape-delay 0.3))
     ;;   (setq evil-insert-state-map nil)
     ;;   (setq evil-normal-state-modes nil)
     ;;   ;;(add-to-list 'evil-emacs-state-modes 'nav-mode)
     ;;   (evil-set-initial-state 'snails-mode 'emacs)
     ;;   (evil-set-initial-state 'help-mode 'emacs)
     ;;   (evil-set-initial-state 'helpful-mode 'emacs)
     ;;   (evil-set-initial-state 'snails-mode 'emacs)
     ;;   (evil-set-initial-state 'dired-mode 'emacs)
     ;;   (evil-set-initial-state 'info-mode 'emacs)
     ;;   (evil-set-initial-state 'elfeed-search-mode 'emacs)
     ;;   (evil-set-initial-state 'elfeed-show-mode 'emacs)
     ;;   (evil-set-initial-state 'newsticker-treeview-mode 'emacs))
   #+END_SRC
** which key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :ensure t
       :config
       (which-key-mode)
       (which-key-setup-side-window-right-bottom))
   #+END_SRC
** ivy/counsel/swiper
   #+BEGIN_SRC emacs-lisp
     (use-package hydra :ensure t)

     (use-package counsel
       :ensure t
       :bind (([remap find-file] . counsel-find-file)
	      ([remap find-dired] . counsel-dired)
	      ("C-c g" . counsel-git)
	      ("C-c j" . counsel-git-grep)
	      ("C-c k" . counsel-ag)))

     (use-package smex :ensure t)

     (use-package ivy
       :ensure t
       :diminish (ivy-mode)
       :bind (("C-x b" . ivy-switch-buffer))
       :config
       (ivy-mode 1)
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-use-virtual-buffers t)
       ;; (setq ivy-display-style 'fancy)
       )


     (use-package wgrep :ensure t)

     ;; (use-package swiper
     ;;   :ensure t
     ;;   :bind (("C-s" . swiper)
     ;; 	 ("C-r" . swiper)
     ;; 	 ("C-c C-r" . ivy-resume)
     ;; 	 ("M-x" . counsel-M-x)
     ;; 	 ("C-x C-f" . counsel-find-file)
     ;; 	 ("C-x d" . counsel-dired)
     ;; 	 ("C-c g" . counsel-git)
     ;; 	 ("C-c j" . counsel-git-grep)
     ;; 	 ("C-c k" . counsel-ag))
     ;;   :config
     ;;   (progn
     ;;     (ivy-mode 1)
     ;;     (setq ivy-use-virtual-buffers t)
     ;;     (setq ivy-display-style 'fancy)
     ;;     (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
     ;;     ))
   #+END_SRC
** search
#+BEGIN_SRC emacs-lisp
  ;;; https://www.emacswiki.org/emacs/ZapToISearch
  (define-key isearch-mode-map [(control return)]
    #'isearch-exit-other-end)
  (defun isearch-exit-other-end ()
    "Exit isearch, at the opposite end of the string."
    (interactive)
    (isearch-exit)
    (goto-char isearch-other-end))
#+END_SRC
** window
   posframe
   #+BEGIN_SRC emacs-lisp
     (use-package posframe :ensure t)
   #+END_SRC

   eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse :ensure t
:config (eyebrowse-mode))
#+END_SRC
** COMMENT avy
   #+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :commands avy-goto-char)
   #+END_SRC

** company-mode
   #+BEGIN_SRC emacs-lisp
     (use-package
       company
       :ensure t
       :diminish ""
       :commands global-company-mode
       :bind (:map company-active-map
		   ("C-n" . company-select-next)
		   ("C-p" . company-select-previous))
       :custom (company-idle-delay 0.2)
       (company-selection-wrap-around
	t)
       (company-minimum-prefix-length
	3)
       (company-candidates-length 30)
       (company-require-match nil)
       (company-dabbrev-ignore-case
	nil)
       (company-dabbrev-downcase nil)
       (company-show-numbers t)
       :config (setq company-minimum-prefix-length
		     3)
       (global-company-mode)
       (use-package
	 company-statistics
	 :ensure t
	 :config (company-statistics-mode))
       (bind-keys
	:map company-active-map
	("TAB" . company-complete)))

     (use-package
       company-quickhelp
       :ensure t
       :config (company-quickhelp-mode 1))

     (use-package
       lsp-mode
       :ensure t
       :commands lsp)

     (use-package
       company-lsp
       :ensure t
       :commands company-lsp
       :config ;; (push 'company-lsp company-backends)
       (setq company-lsp-enable-recompletion
	     t)
       (setq lsp-auto-configure nil))
   #+END_SRC
** edit config
   #+BEGIN_SRC emacs-lisp
      (use-package hungry-delete :ensure t
	:config (global-hungry-delete-mode))

      (use-package expand-region
	:ensure t
	:bind ("C-=" . er/expand-region))

      (use-package iedit
	:ensure t
	:bind ("C-c m" . iedit-mode))

      (use-package multiple-cursors
	:ensure t
	:bind (("C->"           . mc/mark-next-like-this)
	       ("C-<"           . mc/mark-previous-like-this)
	       ("C-M->"         . mc/skip-to-next-like-this)
	       ("C-M-<"         . mc/skip-to-previous-like-this)
	       ("C-c C-<"       . mc/mark-all-like-this)
	       ("C-S-<mouse-1>" . mc/add-cursor-on-click)
	       :map mc/keymap
	       ("C-|" . mc/vertical-align-with-space))
	:config
	(setq mc/insert-numbers-default 1))
      ;; (use-package paredit
      ;;   :ensure t
      ;;   :hook ((emacs-lisp-mode . paredit-mode)
      ;; 	 (ielm-mode . paredit-mode)
      ;; 	 (lisp-mode . paredit-mode)
      ;; 	))

      ;; (use-package paredit-everywhere
      ;;   :ensure t
      ;;   :bind (:map )
      ;;   :hook (prog-mode . paredit-everywhere-mode))
   #+END_SRC
*** snippet
    #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (yas-global-mode 1))

   (use-package yasnippet-snippets
     :ensure t
     :requires yasnippet)
    #+END_SRC
** atomic-chrome
   #+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome
    :ensure t

    :config
    (atomic-chrome-start-server))
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
  ;; https://docs.projectile.mx/en/latest/
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    :bind (:map projectile-mode-map
		("C-c p" . projectile-command-map))
    :custom
    (projectile-completion-system 'ivy)
    (projectile-file-exists-remote-cache-expire (* 10 60)))

  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode))
   #+END_SRC
** server
   #+BEGIN_SRC emacs-lisp
  (use-package server
    :config
    (unless (eq 't (server-running-p))
      (server-start)))
   #+END_SRC
** tools
   #+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :config (google-this-mode +1))

  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    :custom
    (undo-tree-auto-save-history t)
    (undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo"))))

  (use-package
    helpful
    :ensure t
    :bind (("C-h f" . 'helpful-callable)
	   ("C-h v" . 'helpful-variable)
	   ("C-h k" . 'helpful-key)))

  (use-package restart-emacs
    :ensure
    :commands restart-emacs)


  ;; (use-package fuz :ensure t
  ;;   :if (not IS-WINDOWS))
   #+END_SRC
* version control
** git
   #+BEGIN_SRC emacs-lisp
   (use-package magit
     :ensure t
     :commands
     magit)

   (use-package gh
     :ensure t)

   (use-package gist :ensure t
     :commands
     gist-list)

   (use-package git-gutter
     :ensure t
     :hook
     (prog-mode . git-gutter-mode))

   (use-package browse-at-remote :ensure t
     :commands browse-at-remote)

   (use-package git-link :ensure
     :commands git-link)
   #+END_SRC
* COMMENT auto-completion
  #+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (progn
      (ac-config-default)
      (add-to-list 'ac-modes 'org-mode)))
  #+END_SRC
* chinese
** 编码
   #+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)

  ;; 终端中文乱码
  (set-terminal-coding-system 'utf-8)
  (modify-coding-system-alist 'process "*" 'utf-8)

  (defun change-shell-mode-coding ()
    (progn
      (set-terminal-coding-system 'gbk)
      (set-keyboard-coding-system 'gbk)
      (set-selection-coding-system 'gbk)
      (set-buffer-file-coding-system 'gbk)
      (set-file-name-coding-system 'gbk)
      (modify-coding-system-alist 'process "*" 'gbk)
      (set-buffer-process-coding-system 'gbk 'gbk)
      (set-file-name-coding-system 'gbk)))
  (when IS-WINDOWS
    (add-hook 'shell-mode-hook 'change-shell-mode-coding))

   #+END_SRC
** 输入法设置
   #+BEGIN_SRC emacs-lisp
     ;; rime
	 ;;; https://github.com/tumashu/pyim#org37155c7
     (use-package pyim
       :ensure nil
       :demand t
       :config
       ;; 激活 basedict 拼音词库，五笔用户请继续阅读 README
       (use-package pyim-basedict
	 :ensure t
	 :config (pyim-basedict-enable))

       (setq default-input-method "pyim")
       (setq pyim-default-scheme 'xiaohe-shuangpin)

       ;; 开启拼音搜索功能
       ;; (pyim-isearch-mode 1)
       (setq pyim-page-tooltip 'posframe)
       (setq pyim-page-length 5)
       :bind
       (("M-s" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
	("C-;" . pyim-delete-word-from-personal-buffer)))
     (when IS-MAC
       (use-package liberime
	 :after pyim		      ;:load-path "~/tmp/.emacs.d/liberime.so"
	 :load-path "liberime.so"
	 :config
	 ;; 注意事项:
	 ;; 1. 文件路径需要用 `expand-file-name' 函数处理。
	 ;; 2. `librime-start' 的第一个参数说明 "rime 共享数据文件夹"
	 ;;     的位置，不同的平台其位置也各不相同，可以参考：
	 ;;     https://github.com/rime/home/wiki/RimeWithSchemata
	 (liberime-start
	  "/Library/Input Methods/Squirrel.app/Contents/SharedSupport"
	  (file-truename (concat emacs-root-dir "/pyim/rime/")))
	 (liberime-select-schema "double_pinyin_flypy")
	 (setq pyim-default-scheme 'rime)
	 (setq default-input-method "pyim")
	 (setq pyim-page-tooltip 'posframe)))
   #+END_SRC
** other
   #+BEGIN_SRC emacs-lisp
        ;;(when IS-WINDOWS (set-default-font "Sarasa Term TC"))
      ;; (use-package cnfonts
       ;;   :ensure t
       ;;   :config
       ;;   (cnfonts-

     (use-package pangu-spacing
       :ensure t
       :config (global-pangu-spacing-mode 1))

     (use-package ace-pinyin
       :ensure t
       :config
       (ace-pinyin-global-mode 1))

     (use-package youdao-dictionary
       :ensure t
       :bind (("C-c y" . youdao-dictionary-search-at-point+)))



     (defun search-word-structure ()
       (interactive)
       (browse-url
        (concat
         "https://www.youdict.com/ciyuan/s/"
         (thing-at-point 'word))))

     (defalias 'sws 'search-word-structure)
   #+END_SRC
* program
** COMMENT smartparens
被 electric-pair-mode 替换
#+BEGIN_SRC emacs-lisp
  (use-package
    smartparens-config
    :ensure smartparens
    :config (progn
	      (show-smartparens-global-mode
	       t))
    (add-hook
     'prog-mode-hook
     'turn-on-smartparens-strict-mode)
    (add-hook
     'markdown-mode-hook
     'turn-on-smartparens-strict-mode)
    (sp-local-pair 'prog-mode "{" nil :post-handlers '(:add ("||\n[i]" "RET"))))
#+END_SRC
** flycheck
   #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
   #+END_SRC
** lispy
   #+BEGIN_SRC emacs-lisp
  (use-package lispy
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook 'lispy-mode 1))

  ;; (use-package evil-lispy :ensure t
  ;;   :hook (lispy-mode . evil-lispy-mode))
   #+END_SRC
** COMMENT aggressive 让代码一直保持缩进
   #+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (aggressive-indent-global-mode))
   #+END_SRC
** python
   #+BEGIN_SRC emacs-lisp
  ;; (use-package lsp-python-ms :ensure t
  ;;   :hook (python-mode . lsp)
  ;;   :demand
  ;;   :init
  ;;   (setq lsp-python-ms-executable "~/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer.exe"))

  (use-package company-anaconda
    :ensure t
    :hook (python-mode . anaconda-mode)
    :config
    )

  (eval-after-load "company"
   '(add-to-list 'company-backends '(company-anaconda :with company-capf company-yasnippet)))
   #+END_SRC

** autohotkey
   #+BEGIN_SRC emacs-lisp
  (use-package ahk-mode
    :ensure t
    :if IS-WINDOWS)

   #+END_SRC
** javascript
   #+BEGIN_SRC emacs-lisp
     (use-package js2-mode
       :ensure t
       :mode "\\.js\\'")

     ;; (use-package indium :ensure t)
     ;; (use-package company-tern
     ;;   :ensure t
     ;;   :hook (js2-mode . tern-mode))

     ;; (eval-after-load "lsp"
     ;;   (add-hook 'js2-mode-hook 'lsp))
   #+END_SRC

* org
  #+BEGIN_SRC emacs-lisp

    (with-eval-after-load 'org
      (use-package org-protocol )

      (global-set-key "\C-cl" 'org-store-link)
      (global-set-key "\C-cc" 'org-capture)
      (global-set-key "\C-ca" 'org-agenda)

      (use-package org-bullets
	:ensure t
	:init
	(dolist (mode (list 'org-mode-hook 'org-journal-mode-hook))
	  (add-hook mode (lambda () (org-bullets-mode 1)))))


      (use-package org-pomodoro :ensure t)

      (use-package org-journal :ensure t
	:custom
	(org-journal-dir "~/org/journal/")
	(org-journal-date-format "%A, %d %B %Y"))

      (use-package org-agenda
	:defer 10
	:config
	(setq
	 org-default-notes-file "~/org/inbox.org"
	 org-agenda-files (list
			   "~/org/inbox.org"
			   "~/org/word.org"
			   "~/org/email.org"
			   "~/org/tasks.org"
			   "~/org/wtasks.org"
			   "~/org/wkb.org")))

      (define-key org-mode-map (kbd "C-c l") 'org-store-link)
      (global-set-key "\C-ca" 'org-agenda)
      ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))


      (setq
       org-id-link-to-org-use-id 'create-if-interactive
       org-log-done 'time
       org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥")
       org-agenda-start-on-weekday 0
       org-todo-keywords '((sequence
			    "TODO(t!)"
			    "NEXT(n!)"
			    "STARTED(a!)"
			    "WAIT(w@/!)"
			    "OTHERS(o!)"
			    "|"
			    "DONE(d)"
			    "CANCELLED(c)")))
      ;; http://www.zmonster.me/2018/02/28/org-mode-capture.html
      (progn
	(setq org-capture-templates '())
	(add-to-list 'org-capture-templates '("t" "Task"))
	(add-to-list 'org-capture-templates
		     '("l" "links"
		       item (file+olp "~/org/inbox.org" "Links" )
		       "- %:annotation \n\n"))
	(add-to-list 'org-capture-templates
		     '("n" "Note/Data"
		       entry (file+headline "~/org/inbox.org" "Note")
		       "* %? \n\n  Source: %u \n\n %i\n\n ")))
	;;; org mobile
      (setq org-mobile-directory "~/mobile")
      (setq org-mobile-inbox-for-pull "~/mobile/index.org"))
  #+END_SRC
* lazy cat' toolset
** snails 快速搜索
   #+BEGIN_SRC emacs-lisp
  (use-package snails :commands snails :if IS-MAC)
   #+END_SRC
** others
   #+BEGIN_SRC emacs-lisp
     (use-package auto-save
       :config
       (auto-save-enable)
       (setq auto-save-silent t)		; quietly save
       (setq auto-save-delete-trailing-whitespace t)
       (setq backup-directory-alist `(("." . "~/.emacs.d/saves")))
       :custom
       (auto-save-idle 5))


     (use-package google-translate
       :bind (("C-c t" . google-translate-at-point))
       :config
       (setq google-translate-output-destination 'popup)
       :custom
       (google-translate-default-target-language "zh-CN")
       (google-translate-default-source-language "en"))

     (use-package insert-translated-name
       :bind (("C-z C-c" . insert-translated-name-insert)))
   #+END_SRC
** thing edit
   #+BEGIN_SRC emacs-lisp
  (use-package one-key)
  (use-package thing-edit
    :config
    (global-set-key (kbd "M-S")  'one-key-menu-thing-edit))

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Thing-Edit ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defvar one-key-menu-thing-edit-alist nil
    "The `one-key' menu alist for THING-EDIT.")

  (setq one-key-menu-thing-edit-alist
	'(
	  ;; Copy.
	  (("w" . "Copy Word") . thing-copy-word)
	  (("s" . "Copy Symbol") . thing-copy-symbol)
	  (("m" . "Copy Email") . thing-copy-email)
	  (("f" . "Copy Filename") . thing-copy-filename)
	  (("u" . "Copy URL") . thing-copy-url)
	  (("x" . "Copy Sexp") . thing-copy-sexp)
	  (("g" . "Copy Page") . thing-copy-page)
	  (("t" . "Copy Sentence") . thing-copy-sentence)
	  (("o" . "Copy Whitespace") . thing-copy-whitespace)
	  (("i" . "Copy List") . thing-copy-list)
	  (("c" . "Copy Comment") . thing-copy-comment)
	  (("h" . "Copy Function") . thing-copy-defun)
	  (("p" . "Copy Parentheses") . thing-copy-parentheses)
	  (("l" . "Copy Line") . thing-copy-line)
	  (("a" . "Copy To Line Begin") . thing-copy-to-line-beginning)
	  (("e" . "Copy To Line End") . thing-copy-to-line-end)
	  ;; Cut.
	  (("W" . "Cut Word") . thing-cut-word)
	  (("S" . "Cut Symbol") . thing-cut-symbol)
	  (("M" . "Cut Email") . thing-cut-email)
	  (("F" . "Cut Filename") . thing-cut-filename)
	  (("U" . "Cut URL") . thing-cut-url)
	  (("X" . "Cut Sexp") . thing-cut-sexp)
	  (("G" . "Cut Page") . thing-cut-page)
	  (("T" . "Cut Sentence") . thing-cut-sentence)
	  (("O" . "Cut Whitespace") . thing-cut-whitespace)
	  (("I" . "Cut List") . thing-cut-list)
	  (("C" . "Cut Comment") . thing-cut-comment)
	  (("H" . "Cut Function") . thing-cut-defun)
	  (("P" . "Cut Parentheses") . thing-cut-parentheses)
	  (("L" . "Cut Line") . thing-cut-line)
	  (("A" . "Cut To Line Begin") . thing-cut-to-line-beginning)
	  (("E" . "Cut To Line End") . thing-cut-to-line-end)
	  ))

  (defun one-key-menu-thing-edit ()
    "The `one-key' menu for THING-EDIT."
    (interactive)
    (one-key-menu "THING-EDIT" one-key-menu-thing-edit-alist t))
   #+END_SRC
** lazy-search
   #+BEGIN_SRC emacs-lisp
  (use-package lazy-search
    :bind ("C-c s" . lazy-search))
   #+END_SRC
* os settings
  #+BEGIN_SRC emacs-lisp
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  (setq ns-function-modifier 'hyper)

  (setq w32-pass-alt-to-system nil)
  (setq w32-pass-lwindow-to-system nil)
  (setq w32-lwindow-modifier 'nil) ; Left Windows key

  (setq w32-pass-rwindow-to-system nil)
  (setq w32-rwindow-modifier 'nil); Right Windows key

  ;; (setq w32-pass-apps-to-system nil)
  ;; (setq w32-apps-modifier 'hyper) ;
  #+END_SRC
* application
** gnus
   #+BEGIN_SRC emacs-lisp
  (setq send-mail-function (quote smtpmail-send-it))
  (setq smtpmail-smtp-server "smtp.qq.com")
  (setq smtpmail-smtp-service 25)
  (setq user-full-name "kaikai")
  (setq user-mail-address "986374081@qq.com")

  (setq gnus-select-method '(nntp "news.somewhere.edu"))

					  ;(autoload 'newsticker-start "newsticker" "Emacs Newsticker" t)
					  ;(autoload 'newsticker-show-news "newsticker" "Emacs Newsticker" t)
  (add-hook 'newsticker-mode-hook 'imenu-add-menubar-index)
  (defalias 'rss 'newsticker-show-news)
   #+END_SRC
** elfeed
   #+BEGIN_SRC emacs-lisp

     (setq elfeed-db-directory "~/org/elfeeddb")

     (use-package elfeed
       :ensure t
       :commands elfeed)

     (use-package elfeed-goodies
       :ensure t
       :after elfeed
       :config
       (elfeed-goodies/setup))

     (use-package elfeed-org
       :ensure t
       :after elfeed
       :config
       (elfeed-org)
       (setq rmh-elfeed-org-files (list "~/org/elfeed.org")))
     (add-to-list 'org-capture-templates
                          '("R" "RSS"
                            entry (file+headline "~/org/elfeed.org" "Links" )
                            "** %:annotation \n\n"))
   #+END_SRC
** anki
   #+BEGIN_SRC emacs-lisp
     (use-package anki-editor
       :ensure t
       :defer 5)

     (defun create-note (note)
       "Request AnkiConnect for creating NOTE."
       (let ((queue (anki-editor--anki-connect-invoke-queue)))
	 (funcall queue
		  'addNote
		  `((note . ,(anki-editor--anki-connect-map-note note))))

	 (funcall queue)))

      (defun create-word-card (word result)
	(let ((fields `(("正面" . ,word)
			("背面" . ,result))))
	  (create-note
	   `((deck . "word")
	     (note-id . -1)
	     (note-type . "basic")
	     (fields . ,fields)))))

      ;; TODO 不处理中文
      (defun create-card-with-point-word ()
	(interactive)
	(require 'youdao-dictionary)
	(require 'anki-editor)
	(let* ((string (thing-at-point 'word))
	      (result (youdao-dictionary--format-result string)))
	  (create-word-card string (replace-regexp-in-string "\n" "<br>" result))))

      (defalias 'cc 'create-card-with-point-word)
   #+END_SRC
** pomodoro
   #+BEGIN_SRC emacs-lisp
  (setq pomodoro-time 25)
  (defun pomodoro ()
    (interactive)
    (message "start.")
    (run-at-time (* pomodoro-time 60) nil (lambda ()
					    (message "Time's up")
					    (switch-to-buffer "*Messages*")
					    (pomodoro-rest))))
  (defun pomodoro-rest ()
    (interactive)
    (run-at-time (* 5 60) nil
		 (lambda ()
		   (switch-to-buffer (other-buffer)))))
   #+END_SRC
** pdf-tools
   #+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    :config (pdf-loader-install))
   #+END_SRC
** keyfreq
   #+BEGIN_SRC emacs-lisp
     (use-package keyfreq
       :ensure t
       :hook (prog-mode . keyfreq-mode)
       :config
       (keyfreq-autosave-mode +1))

     ;; (setq keyfreq-excluded-commands
     ;;       '(self-insert-command
     ;; 	abort-recursive-edit
     ;; 	ace-jump-done
     ;; 	ace-jump-move
     ;; 	ace-window
     ;; 	avy-goto-line
     ;; 	backward-char
     ;; 	backward-kill-word
     ;; 	backward-word
     ;; 	clipboard-kill-ring-save
     ;; 	comint-previous-input
     ;; 	comint-send-input
     ;; 	company-complete-common
     ;; 	company-complete-number
     ;; 	company-complete-selection
     ;; 	company-ignore
     ;; 	delete-backward-char
     ;; 	describe-variable
     ;; 	dired                           ; nothing to optimize in dired
     ;; 	dired-do-async-shell-command
     ;; 	dired-find-file
     ;; 	diredp-next-line
     ;; 	diredp-previous-line
     ;; 	electric-pair-delete-pair
     ;; 	erase-message-buffer
     ;; 	eval-buffer
     ;; 	evil-a-WORD
     ;; 	evil-append
     ;; 	evil-backward-char
     ;; 	evil-backward-word-begin
     ;; 	evil-change
     ;; 	evil-change-line
     ;; 	evil-complete-next
     ;; 	evil-complete-previous
     ;; 	evil-delete
     ;; 	evil-delete-backward-char-and-join
     ;; 	evil-delete-char
     ;; 	evil-delete-line
     ;; 	evil-emacs-state
     ;; 	evil-end-of-line
     ;; 	evil-escape-emacs-state
     ;; 	evil-escape-insert-state
     ;; 	evil-escape-isearch
     ;; 	evil-escape-minibuffer
     ;; 	evil-escape-motion-state
     ;; 	evil-escape-visual-state
     ;; 	evil-ex
     ;; 	evil-ex-command
     ;; 	evil-ex-completion
     ;; 	evil-ex-delete-backward-char
     ;; 	evil-exit-emacs-state
     ;; 	evil-exit-visual-state
     ;; 	evil-filepath-inner-text-object
     ;; 	evil-filepath-outer-text-object
     ;; 	evil-find-char
     ;; 	evil-find-char-to
     ;; 	evil-first-non-blank
     ;; 	evil-force-normal-state
     ;; 	evil-forward-char
     ;; 	evil-forward-word-begin
     ;; 	evil-forward-word-end
     ;; 	evil-goto-definition
     ;; 	evil-goto-first-line
     ;; 	evil-goto-line
     ;; 	evil-goto-mark-line
     ;; 	evil-indent
     ;; 	evil-inner-WORD
     ;; 	evil-inner-double-quote
     ;; 	evil-inner-single-quote
     ;; 	evil-inner-word
     ;; 	evil-insert
     ;; 	evil-join
     ;; 	evil-jump-backward
     ;; 	evil-jump-forward
     ;; 	evil-mc-make-and-goto-next-match
     ;; 	evil-next-line
     ;; 	evil-next-visual-line
     ;; 	evil-normal-state
     ;; 	evil-open-below
     ;; 	evil-paste-after
     ;; 	evil-paste-before
     ;; 	evil-previous-line
     ;; 	evil-previous-visual-line
     ;; 	evil-record-macro
     ;; 	evil-repeat
     ;; 	evil-replace
     ;; 	evil-ret
     ;; 	evil-scroll-page-down
     ;; 	evil-scroll-page-up
     ;; 	evil-search-forward
     ;; 	evil-search-next
     ;; 	evil-search-word-forward
     ;; 	evil-set-marker
     ;; 	evil-substitute
     ;; 	evil-visual-block
     ;; 	evil-visual-char
     ;; 	evil-visual-line
     ;; 	evil-yank
     ;; 	exit-minibuffer
     ;; 	ffip
     ;; 	forward-char
     ;; 	forward-word
     ;; 	gnus
     ;; 	gnus-summary-exit
     ;; 	gnus-summary-next-page
     ;; 	gnus-summary-scroll-up
     ;; 	gnus-topic-select-group
     ;; 	goto-line
     ;; 	hippie-expand
     ;; 	ido-complete
     ;; 	ido-delete-backward-updir
     ;; 	ido-exit-minibuffer
     ;; 	ido-switch-buffer
     ;; 	indent-new-comment-line
     ;; 	isearch-abort
     ;; 	isearch-backward-regexp
     ;; 	isearch-cancel
     ;; 	isearch-delete-char
     ;; 	isearch-exit
     ;; 	isearch-forward-regexp
     ;; 	isearch-other-control-char
     ;; 	isearch-other-meta-char
     ;; 	isearch-printing-char
     ;; 	isearch-repeat-forward
     ;; 	isearch-ring-retreat
     ;; 	ispell-minor-check
     ;; 	ivy-backward-delete-char
     ;; 	ivy-backward-kill-word
     ;; 	ivy-done
     ;; 	ivy-next-line
     ;; 	ivy-occur
     ;; 	ivy-occur-next-line
     ;; 	ivy-occur-press-and-switch
     ;; 	ivy-occur-previous-line
     ;; 	ivy-previous-line
     ;; 	ivy-wgrep-change-to-wgrep-mode
     ;; 	js-mode
     ;; 	js2-line-break
     ;; 	keyboard-escape-quit
     ;; 	keyboard-quit
     ;; 	keyfreq-mode
     ;; 	keyfreq-save-now
     ;; 	keyfreq-show
     ;; 	kill-sentence
     ;; 	left-char
     ;; 	markdown-exdent-or-delete
     ;; 	markdown-outdent-or-delete
     ;; 	minibuffer-complete
     ;; 	minibuffer-complete-and-exit
     ;; 	minibuffer-keyboard-quit
     ;; 	move-beginning-of-line
     ;; 	move-end-of-line
     ;; 	mwheel-scroll
     ;; 	my-setup-develop-environment
     ;; 	newline-and-indent
     ;; 	next-history-element
     ;; 	next-line
     ;; 	org-beginning-of-line
     ;; 	org-ctrl-c-ctrl-c
     ;; 	org-cycle
     ;; 	org-delete-backward-char
     ;; 	org-end-of-line
     ;; 	org-force-self-insert
     ;; 	org-return
     ;; 	org-self-insert-command
     ;; 	org-todo
     ;; 	orgtbl-self-insert-command
     ;; 	package-menu-execute
     ;; 	paredit-backward-delete
     ;; 	paredit-backward-kill-word
     ;; 	paredit-close-round
     ;; 	paredit-doublequote
     ;; 	paredit-newline
     ;; 	paredit-open-round
     ;; 	paredit-semicolon
     ;; 	pcomplete
     ;; 	previous-history-element
     ;; 	previous-line
     ;; 	push-button
     ;; 	pwd
     ;; 	quit-window
     ;; 	right-char
     ;; 	rjsx-electric-gt
     ;; 	rjsx-electric-lt
     ;; 	save-buffer
     ;; 	save-buffers-kill-terminal
     ;; 	scroll-down-command
     ;; 	scroll-up-command
     ;; 	select-window-0
     ;; 	select-window-1
     ;; 	select-window-2
     ;; 	select-window-3
     ;; 	select-window-4
     ;; 	select-window-5
     ;; 	select-window-6
     ;; 	select-window-7
     ;; 	select-window-8
     ;; 	select-window-9
     ;; 	self-insert-command
     ;; 	smarter-move-beginning-of-line
     ;; 	suspend-frame
     ;; 	term-send-raw
     ;; 	turnon-keyfreq-mode
     ;; 	undefined ;; lambda function
     ;; 	undo-tree-redo
     ;; 	undo-tree-undo
     ;; 	w3m-goto-url
     ;; 	w3m-next-anchor
     ;; 	w3m-view-this-url
     ;; 	web-mode
     ;; 	web-mode-complete
     ;; 	web-mode-jshint
     ;; 	web-mode-navigate
     ;; 	web-mode-part-beginning
     ;; 	web-mode-reload
     ;; 	web-mode-reveal
     ;; 	web-mode-surround
     ;; 	web-mode-tag-beginning
     ;; 	web-mode-test
     ;; 	wgrep-finish-edit
     ;; 	xterm-paste
     ;; 	yank
     ;; 	yas-compile-directory
     ;; 	yas-expand
     ;; 	yas-next-field-or-maybe-expand))

   #+END_SRC
* keybindings
** xah-fly-keys
#+BEGIN_SRC emacs-lisp
  (use-package xah-fly-keys
    :ensure t
    :init
    (setq xah-fly-use-control-key nil)
    (setq xah-fly-use-meta-key nil)
    :config
    (xah-fly-keys-set-layout "dvorak")
    (xah-fly-keys 1)
    (global-set-key (kbd "M-c") 'xah-fly-command-mode-activate))


  (global-set-key [remap smex] 'counsel-M-x)
  (setq ivy-initial-inputs-alist nil)

(defun my-bindkey-xfk-insert-mode ()
  "Define keys for `xah-fly-insert-mode-activate-hook'"
  (interactive)
  (dolist (letter
	     (mapcar
	      #'char-to-string
	      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
    (define-key xah-fly-key-map (kbd letter) nil))
  (define-key xah-fly-key-map (kbd "C-9") nil)
  (define-key xah-fly-key-map (kbd "C-0") nil)

  (define-key xah-fly-key-map (kbd "C-1") nil)
  (define-key xah-fly-key-map (kbd "C-2") nil)
  (define-key xah-fly-key-map (kbd "C-7") nil)
  (define-key xah-fly-key-map (kbd "C-8") nil)

  (define-key xah-fly-key-map (kbd "C-5") nil)
  (define-key xah-fly-key-map (kbd "C-6") nil)

  (define-key xah-fly-key-map (kbd "C-3") nil)
  (define-key xah-fly-key-map (kbd "C-4") nil)

  )

  (defun my-bindkey-xfk-command-mode ()
    "Define keys for `xah-fly-command-mode-activate-hook'"
    (interactive)
    (define-key xah-fly-key-map (kbd "Y") 'youdao-dictionary-search-at-point-posframe)
    (define-key xah-fly-key-map (kbd "T") 'google-translate-at-point)
    (define-key xah-fly-key-map (kbd "G") 'magit-status)
    (define-key xah-fly-key-map (kbd "B") 'browse-at-remote)
    (define-key xah-fly-key-map (kbd "E") 'elfeed)

    (define-key xah-fly-key-map (kbd "C-9") 'scroll-down-command)
    (define-key xah-fly-key-map (kbd "C-0") 'scroll-up-command)

    (define-key xah-fly-key-map (kbd "C-1") 'xah-next-user-buffer)
    (define-key xah-fly-key-map (kbd "C-2") 'xah-previous-user-buffer)
    (define-key xah-fly-key-map (kbd "C-7") 'xah-previous-user-buffer)
    (define-key xah-fly-key-map (kbd "C-8") 'xah-next-user-buffer)

    (define-key xah-fly-key-map (kbd "C-5") 'xah-previous-emacs-buffer)
    (define-key xah-fly-key-map (kbd "C-6") 'xah-next-emacs-buffer)

    (define-key xah-fly-key-map (kbd "C-3") 'previous-error)
    (define-key xah-fly-key-map (kbd "C-4") 'next-error)
    (when current-input-method (deactivate-input-method)) ; disable input
    )

  (add-hook 'xah-fly-insert-mode-activate-hook 'my-bindkey-xfk-insert-mode)
  (add-hook 'xah-fly-command-mode-activate-hook 'my-bindkey-xfk-command-mode)
#+END_SRC
** COMMENT evil
  #+BEGIN_SRC emacs-lisp

    (with-eval-after-load 'evil-leader

      (evil-leader/set-key
       "<SPC>" 'counsel-M-x)

      (evil-leader/set-key
       "ff" 'counsel-find-file
       "fr" 'counsel-recentf
       "fs" 'snails
       "fp" 'snails-search-point
       "bb" 'ivy-switch-buffer
       "bd" 'ido-kill-buffer)

      (evil-leader/set-key
       "gs" 'magit-status
       "gg" 'google-this-search
       "gt" 'google-translate-at-point
       "gb" 'browse-at-remote
       "gl" 'git-link)

      (evil-leader/set-key
       "wu" 'winner-undo
       "wU" 'winner-redo
       "wo" 'delete-other-windows
       "ww" 'ace-window)

      (evil-leader/set-key
       "cl" 'evilnc-comment-or-uncomment-lines
       "cL" 'evilnc-quick-comment-or-uncomment-to-the-line
       "cc" 'evilnc-copy-and-comment-lines
       "cp" 'evilnc-comment-or-uncomment-paragraphs
       "cr" 'comment-or-uncomment-region
       "cv" 'evilnc-toggle-invert-comment-line-by-line
       "." 'evilnc-copy-and-comment-operator
       "\\" 'evilnc-comment-operator)

      (evil-leader/set-key
       "an" 'newsticker-show-news
       "ae" 'elfeed
       "ap" 'pomodoro
       "ak" 'keyfreq-show)

      (evil-leader/set-key
       "qr" 'restart-emacs)

      (evil-leader/set-key
       "ss" 'avy-goto-char
       "sn" 'yas-new-snippet
       "sv" 'yas-visit-snippet-file))
  #+END_SRC
** COMMENT ergoemacs
#+BEGIN_SRC emacs-lisp
  (use-package ergoemacs-mode
    :ensure t
    :config
    (setq ergoemacs-keyboard-layout "dv")
    (ergoemacs-mode 1)
    )
#+END_SRC
